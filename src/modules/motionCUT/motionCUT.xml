<module>
    <!-- module's name should match its executable file's name. -->
    <name>motionCUT</name>
    <description>Motion detector with egomotion compensation.</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param default = "motionCUT" desc="name of the module"> name </param>
	<param default="" desc="configuration file name"> from </param>
	<param default="" desc="select the current context"> context </param>
	<param default="" desc="select the current context"> context </param>
	<!--switch desc="If this options is given then an empty database is started."> empty</switch-->
	<!--switch desc="If this option is given then the content of database is not saved at shutdown."> nosave</switch-->
	<!--switch desc="Enable some verbosity."> verbose</switch-->
	<!--switch desc="Broadcast the database content whenever a change occurs."> async_bc</switch-->
	<!--switch desc="Enable statistics printouts."> stats</switch-->
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
		<author email="carlo.ciliberto@iit.it"> Carlo Ciliberto </author>
    </authors>

     <!-- <data> can have multiple <input> or <output> tags. -->
     <data>
        <!-- input data if available-->
        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>Image</type>

            <!-- input port which receive images. -->
            <port carrier="tcp">/motionCUT/img:i</port>

            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>no</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>Feed images to motionCUT using this port.</description>
        </input>

        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>Rpc</type>

            <!-- RPC communication, configure module. -->
            <port carrier="tcp">/motionCUT/rpc</port>

            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>no</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>Management port.</description>
        </input>

        <output>
            <type>Image</type>
            <port carrier="udp">/motionCUT/img:o</port>
            <description>Output image with grid and motion detection.</description>
        </output>

		<output>
            <type>Bottle</type>
            <port carrier="udp">/motionCUT/nodes:o</port>
            <description>Outputs the x-y location of the currently active nodes in this format. Propagates time stamps</description>
        </output>
		
		
		<output>
            <type>Bottle</type>
            <port carrier="udp">/motionCUT/blobs:o</port>
            <description>Outputs the x-y location of blobs centroids along with their size.</description>
        </output>
		
		<output>
            <type>Image</type>
            <port carrier="udp">/motionCUT/crop:o</port>
            <description>Outputs a windows of fixed size obtained from a ROI around the center of mass of the largest blob detected</description>
        </output>
		
		<output>
            <type>Image</type>
            <port carrier="udp">/motionCUT/opt:o</port>
            <description>Outputs a monochrome image containing just the grid nodes signaling independent targets.</description>
        </output>
		
    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library></library>
    </development>

</module>

