<module>
	<name>dataDumper</name>
	<description> Acquires and stores Bottles or Images and Videos from a YARP port. </description>
	<version>1.0</version>
	
	<arguments>
		<!-- <param default="/yarpview/img:i" required="no" desc="input port name">name</param> -->
		<param default="/dump" required="no" desc="DEPRECATED name of the listening port opened by the service">name</param>
		<param default="bottle" required="no" desc="type of items to be stored. It can be bottle, image or video. Note that images are stored as
  ppm files. The data type video is available if OpenCV is found and the codec  huffyuv is installed.">type</param>						
		<switch default="off" required="no" desc="In case images are acquired with this option enabled, a video 
  called 'video.avi' is also produced at the same time. This
  option is available if OpenCV is found and the codec \e
  huffyuv is installed in the system.">addVideo</switch>
		<param default="0" required="no" desc="With this option it is possible to reduce the storing rate by 
  a factor n, i.e. the parameter n specifies how many
  items (bottles or images) shall be skipped after one
  acquisition.">downsample</param>
		<switch default="off" required="no" desc="If this option is on,the time of the
  receiving machine on which the service is running will be used as time stamp for saved data instead of the sender time.">rxTime</switch>
	</arguments>
			
	<authors>
		<author email="Ugo.Pattacini@iit.it"> Ugo Pattacini </author>
	</authors>
	
	<data>     
        <input>
            <type>*</type>
            <port>/dump</port>
			<required>yes</required>
			<priority>no</priority>
			<description> port to which data to be saved is sent</description>
        </input>	
	<input>
            <type>rpc</type>
            <port>/dump/rpc</port>
			<required>no</required>
			<priority>no</priority>
			<description> emote procedure call port useful
  to shut down the service remotely by sending to this port the
  'quit' command</description>
        </input>	
	</data>	

    <deployer></deployer> 

    <dependencies>
        <computer>
        </computer>
    </dependencies>

	<development>
		<library>YARP</library>
	</development>
	
</module>
